{"ast":null,"code":"var _jsxFileName = \"C:\\\\Others\\\\Projects\\\\2\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from 'react';\n// // import { CSSTransition, TransitionGroup } from 'react-transition-group';\n// // import ConnectionCount from './Connectioncount';\n// // const api_base = 'http://localhost:3001';\n\n// // function App() {\n// //   const [todos, setTodos] = useState([]);\n// //   const [popupActive, setPopupActive] = useState(false);\n// //   const [newTodo, setNewTodo] = useState(\"\");\n\n// //   useEffect(() => {\n// //     GetTodos();\n// //   }, []);\n\n// //   const GetTodos = () => {\n// //     fetch(api_base + '/todos')\n// //       .then((res) => res.json())\n// //       .then((data) => setTodos(data))\n// //       .catch((err) => console.error(\"Error: \", err));\n// //   };\n\n// //   const completeTodo = async (id) => {\n// //     try {\n// //       const response = await fetch(api_base + '/todo/complete/' + id);\n// //       const data = await response.json();\n\n// //       setTodos((todos) =>\n// //         todos.map((todo) => {\n// //           if (todo._id === data._id) {\n// //             todo.complete = data.complete;\n// //           }\n// //           return todo;\n// //         })\n// //       );\n// //     } catch (err) {\n// //       console.error(\"Error completing todo: \", err);\n// //     }\n// //   };\n\n// //   const addTodo = async () => {\n// //     try {\n// //       const response = await fetch(api_base + \"/todo/new\", {\n// //         method: \"POST\",\n// //         headers: {\n// //           \"Content-Type\": \"application/json\",\n// //         },\n// //         body: JSON.stringify({\n// //           text: newTodo,\n// //         }),\n// //       });\n\n// //       const data = await response.json();\n\n// //       setTodos([...todos, data]);\n\n// //       setPopupActive(false);\n// //       setNewTodo(\"\");\n// //     } catch (err) {\n// //       console.error(\"Error adding todo: \", err);\n// //     }\n// //   };\n\n// //   const deleteTodo = async (id) => {\n// //     try {\n// //       const response = await fetch(api_base + '/todo/delete/' + id, {\n// //         method: \"DELETE\",\n// //       });\n\n// //       const data = await response.json();\n\n// //       setTodos((todos) =>\n// //         todos.filter((todo) => todo._id !== data.result._id)\n// //       );\n// //     } catch (err) {\n// //       console.error(\"Error deleting todo: \", err);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       <ConnectionCount />\n// //       <h1>Welcome, My Friend</h1>\n// //       <h4>Your tasks</h4>\n\n// //       <TransitionGroup className=\"todos\">\n// //         {todos.length > 0 ? (\n// //           todos.map((todo) => (\n// //             <CSSTransition key={todo._id} timeout={500} classNames=\"todo\">\n// //               <div\n// //                 className={\"todo\" + (todo.complete ? \" is-complete\" : \"\")}\n// //                 onClick={() => completeTodo(todo._id)}\n// //               >\n// //                 <div className=\"checkbox\"></div>\n// //                 <div className=\"text\">{todo.text}</div>\n// //                 <div className=\"delete-todo\" onClick={() => deleteTodo(todo._id)}>\n// //                   x\n// //                 </div>\n// //               </div>\n// //             </CSSTransition>\n// //           ))\n// //         ) : null}\n// //       </TransitionGroup>\n\n// //       <div className=\"addPopup\" onClick={() => setPopupActive(true)}>\n// //         +\n// //       </div>\n\n// //       {popupActive ? (\n// //         <CSSTransition in={true} timeout={300} classNames=\"popup\" unmountOnExit>\n// //           <div className=\"popup\">\n// //             <div className=\"closePopup\" onClick={() => setPopupActive(false)}>\n// //               X\n// //             </div>\n// //             <div className=\"content\">\n// //               <h3>Add Task</h3>\n// //               <input\n// //                 type=\"text\"\n// //                 className=\"add-todo-input\"\n// //                 onChange={(e) => setNewTodo(e.target.value)}\n// //                 value={newTodo}\n// //               />\n// //               <div className=\"button\" onClick={addTodo}>\n// //                 Create Task\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </CSSTransition>\n// //       ) : (\n// //         ''\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n// // // Add the CSS styles you previously mentioned for the animations\n// import React, { useEffect, useState } from 'react';\n// import { CSSTransition, TransitionGroup } from 'react-transition-group';\n// import ConnectionCount from './Connectioncount';\n// const api_base = 'http://localhost:3001';\n\n// function App() {\n//   const [todos, setTodos] = useState([]);\n//   const [popupActive, setPopupActive] = useState(false);\n//   const [newTodo, setNewTodo] = useState(\"\");\n\n//   useEffect(() => {\n//     GetTodos();\n//   }, []);\n\n//   const GetTodos = () => {\n//     fetch(api_base + '/todos')\n//       .then((res) => res.json())\n//       .then((data) => setTodos(data))\n//       .catch((err) => console.error(\"Error: \", err));\n//   };\n\n//   const completeTodo = async (id) => {\n//     try {\n//       const response = await fetch(api_base + '/todo/complete/' + id);\n//       const data = await response.json();\n\n//       setTodos((todos) =>\n//         todos.map((todo) => {\n//           if (todo._id === data._id) {\n//             todo.complete = data.complete;\n//           }\n//           return todo;\n//         })\n//       );\n//     } catch (err) {\n//       console.error(\"Error completing todo: \", err);\n//     }\n//   };\n\n//   const addTodo = async () => {\n//     try {\n//       const response = await fetch(api_base + \"/todo/new\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           text: newTodo,\n//         }),\n//       });\n\n//       const data = await response.json();\n\n//       setTodos([...todos, data]);\n\n//       setPopupActive(false);\n//       setNewTodo(\"\");\n//     } catch (err) {\n//       console.error(\"Error adding todo: \", err);\n//     }\n//   };\n\n//   const deleteTodo = async (id) => {\n//     try {\n//       const response = await fetch(api_base + '/todo/delete/' + id, {\n//         method: \"DELETE\",\n//       });\n\n//       if (response.ok) {\n//         // Delete was successful, update the state\n//         setTodos((todos) =>\n//           todos.filter((todo) => todo._id !== id)\n//         );\n//       } else {\n//         console.error(\"Error deleting todo: \", response.statusText);\n//       }\n//     } catch (err) {\n//       console.error(\"Error deleting todo: \", err);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <ConnectionCount />\n//       <h1>Welcome, My Friend</h1>\n//       <h4>Your tasks</h4>\n\n//       <TransitionGroup className=\"todos\">\n//         {todos.length > 0 ? (\n//           todos.map((todo) => (\n//             <CSSTransition key={todo._id} timeout={500} classNames=\"todo\">\n//               <div\n//                 className={\"todo\" + (todo.complete ? \" is-complete\" : \"\")}\n//                 onClick={() => completeTodo(todo._id)}\n//               >\n//                 <div className=\"checkbox\"></div>\n//                 <div className=\"text\">{todo.text}</div>\n//                 <div className=\"delete-todo\" onClick={() => deleteTodo(todo._id)}>\n//                   x\n//                 </div>\n//               </div>\n//             </CSSTransition>\n//           ))\n//         ) : null}\n//       </TransitionGroup>\n\n//       <div className=\"addPopup\" onClick={() => setPopupActive(true)}>\n//         +\n//       </div>\n\n//       {popupActive ? (\n//         <CSSTransition in={true} timeout={300} classNames=\"popup\" unmountOnExit>\n//           <div className=\"popup\">\n//             <div className=\"closePopup\" onClick={() => setPopupActive(false)}>\n//               X\n//             </div>\n//             <div className=\"content\">\n//               <h3>Add Task</h3>\n//               <input\n//                 type=\"text\"\n//                 className=\"add-todo-input\"\n//                 onChange={(e) => setNewTodo(e.target.value)}\n//                 value={newTodo}\n//               />\n//               <div className=\"button\" onClick={addTodo}>\n//                 Create Task\n//               </div>\n//             </div>\n//           </div>\n//         </CSSTransition>\n//       ) : (\n//         ''\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useEffect, useState } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport ConnectionCount from './ConnectionCount'; // Correct the import path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api_base = 'http://localhost:3001';\nfunction App() {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const [popupActive, setPopupActive] = useState(false);\n  const [newTodo, setNewTodo] = useState(\"\");\n  const [connectionCount, setConnectionCount] = useState(0); // State to hold the connection count\n\n  useEffect(() => {\n    GetTodos();\n  }, []);\n\n  // Function to fetch the connection count from the server\n  const fetchConnectionCount = async () => {\n    try {\n      const response = await fetch(api_base + '/connection-count');\n      const data = await response.json();\n      setConnectionCount(data.connectionCount); // Update the connection count state\n    } catch (error) {\n      console.error('Error fetching connection count: ', error);\n    }\n  };\n  useEffect(() => {\n    fetchConnectionCount(); // Fetch the initial connection count\n  }, []); // Empty dependency array, runs only once on component mount\n\n  const GetTodos = () => {\n    fetch(api_base + '/todos').then(res => res.json()).then(data => {\n      setTodos(data);\n      fetchConnectionCount(); // Fetch connection count after fetching todos\n    }).catch(err => console.error(\"Error: \", err));\n  };\n  const completeTodo = async id => {\n    try {\n      const response = await fetch(api_base + '/todo/complete/' + id);\n      const data = await response.json();\n      setTodos(todos => todos.map(todo => {\n        if (todo._id === data._id) {\n          todo.complete = data.complete;\n        }\n        return todo;\n      }));\n      fetchConnectionCount(); // Fetch connection count after completing todo\n    } catch (err) {\n      console.error(\"Error completing todo: \", err);\n    }\n  };\n  const addTodo = async () => {\n    try {\n      const response = await fetch(api_base + \"/todo/new\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          text: newTodo\n        })\n      });\n      const data = await response.json();\n      setTodos([...todos, data]);\n      setPopupActive(false);\n      setNewTodo(\"\");\n      fetchConnectionCount(); // Fetch connection count after adding todo\n    } catch (err) {\n      console.error(\"Error adding todo: \", err);\n    }\n  };\n  const deleteTodo = async id => {\n    try {\n      const response = await fetch(api_base + '/todo/delete/' + id, {\n        method: \"DELETE\"\n      });\n      if (response.ok) {\n        // Delete was successful, update the state\n        setTodos(todos => todos.filter(todo => todo._id !== id));\n      } else {\n        console.error(\"Error deleting todo: \", response.statusText);\n      }\n      fetchConnectionCount(); // Fetch connection count after deleting todo\n    } catch (err) {\n      console.error(\"Error deleting todo: \", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ConnectionCount, {\n      connectionCount: connectionCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome, My Friend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Your tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0Fl8ff/lm05KzfXv/884pNobp4E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","CSSTransition","TransitionGroup","ConnectionCount","jsxDEV","_jsxDEV","api_base","App","_s","todos","setTodos","popupActive","setPopupActive","newTodo","setNewTodo","connectionCount","setConnectionCount","GetTodos","fetchConnectionCount","response","fetch","data","json","error","console","then","res","catch","err","completeTodo","id","map","todo","_id","complete","addTodo","method","headers","body","JSON","stringify","text","deleteTodo","ok","filter","statusText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Others/Projects/2/client/src/App.js"],"sourcesContent":["// // import React, { useEffect, useState } from 'react';\n// // import { CSSTransition, TransitionGroup } from 'react-transition-group';\n// // import ConnectionCount from './Connectioncount';\n// // const api_base = 'http://localhost:3001';\n\n// // function App() {\n// //   const [todos, setTodos] = useState([]);\n// //   const [popupActive, setPopupActive] = useState(false);\n// //   const [newTodo, setNewTodo] = useState(\"\");\n\n// //   useEffect(() => {\n// //     GetTodos();\n// //   }, []);\n\n// //   const GetTodos = () => {\n// //     fetch(api_base + '/todos')\n// //       .then((res) => res.json())\n// //       .then((data) => setTodos(data))\n// //       .catch((err) => console.error(\"Error: \", err));\n// //   };\n\n// //   const completeTodo = async (id) => {\n// //     try {\n// //       const response = await fetch(api_base + '/todo/complete/' + id);\n// //       const data = await response.json();\n\n// //       setTodos((todos) =>\n// //         todos.map((todo) => {\n// //           if (todo._id === data._id) {\n// //             todo.complete = data.complete;\n// //           }\n// //           return todo;\n// //         })\n// //       );\n// //     } catch (err) {\n// //       console.error(\"Error completing todo: \", err);\n// //     }\n// //   };\n\n// //   const addTodo = async () => {\n// //     try {\n// //       const response = await fetch(api_base + \"/todo/new\", {\n// //         method: \"POST\",\n// //         headers: {\n// //           \"Content-Type\": \"application/json\",\n// //         },\n// //         body: JSON.stringify({\n// //           text: newTodo,\n// //         }),\n// //       });\n\n// //       const data = await response.json();\n\n// //       setTodos([...todos, data]);\n\n// //       setPopupActive(false);\n// //       setNewTodo(\"\");\n// //     } catch (err) {\n// //       console.error(\"Error adding todo: \", err);\n// //     }\n// //   };\n\n// //   const deleteTodo = async (id) => {\n// //     try {\n// //       const response = await fetch(api_base + '/todo/delete/' + id, {\n// //         method: \"DELETE\",\n// //       });\n\n// //       const data = await response.json();\n\n// //       setTodos((todos) =>\n// //         todos.filter((todo) => todo._id !== data.result._id)\n// //       );\n// //     } catch (err) {\n// //       console.error(\"Error deleting todo: \", err);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       <ConnectionCount />\n// //       <h1>Welcome, My Friend</h1>\n// //       <h4>Your tasks</h4>\n\n// //       <TransitionGroup className=\"todos\">\n// //         {todos.length > 0 ? (\n// //           todos.map((todo) => (\n// //             <CSSTransition key={todo._id} timeout={500} classNames=\"todo\">\n// //               <div\n// //                 className={\"todo\" + (todo.complete ? \" is-complete\" : \"\")}\n// //                 onClick={() => completeTodo(todo._id)}\n// //               >\n// //                 <div className=\"checkbox\"></div>\n// //                 <div className=\"text\">{todo.text}</div>\n// //                 <div className=\"delete-todo\" onClick={() => deleteTodo(todo._id)}>\n// //                   x\n// //                 </div>\n// //               </div>\n// //             </CSSTransition>\n// //           ))\n// //         ) : null}\n// //       </TransitionGroup>\n\n// //       <div className=\"addPopup\" onClick={() => setPopupActive(true)}>\n// //         +\n// //       </div>\n\n// //       {popupActive ? (\n// //         <CSSTransition in={true} timeout={300} classNames=\"popup\" unmountOnExit>\n// //           <div className=\"popup\">\n// //             <div className=\"closePopup\" onClick={() => setPopupActive(false)}>\n// //               X\n// //             </div>\n// //             <div className=\"content\">\n// //               <h3>Add Task</h3>\n// //               <input\n// //                 type=\"text\"\n// //                 className=\"add-todo-input\"\n// //                 onChange={(e) => setNewTodo(e.target.value)}\n// //                 value={newTodo}\n// //               />\n// //               <div className=\"button\" onClick={addTodo}>\n// //                 Create Task\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </CSSTransition>\n// //       ) : (\n// //         ''\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n// // // Add the CSS styles you previously mentioned for the animations\n// import React, { useEffect, useState } from 'react';\n// import { CSSTransition, TransitionGroup } from 'react-transition-group';\n// import ConnectionCount from './Connectioncount';\n// const api_base = 'http://localhost:3001';\n\n// function App() {\n//   const [todos, setTodos] = useState([]);\n//   const [popupActive, setPopupActive] = useState(false);\n//   const [newTodo, setNewTodo] = useState(\"\");\n\n//   useEffect(() => {\n//     GetTodos();\n//   }, []);\n\n//   const GetTodos = () => {\n//     fetch(api_base + '/todos')\n//       .then((res) => res.json())\n//       .then((data) => setTodos(data))\n//       .catch((err) => console.error(\"Error: \", err));\n//   };\n\n//   const completeTodo = async (id) => {\n//     try {\n//       const response = await fetch(api_base + '/todo/complete/' + id);\n//       const data = await response.json();\n\n//       setTodos((todos) =>\n//         todos.map((todo) => {\n//           if (todo._id === data._id) {\n//             todo.complete = data.complete;\n//           }\n//           return todo;\n//         })\n//       );\n//     } catch (err) {\n//       console.error(\"Error completing todo: \", err);\n//     }\n//   };\n\n//   const addTodo = async () => {\n//     try {\n//       const response = await fetch(api_base + \"/todo/new\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           text: newTodo,\n//         }),\n//       });\n\n//       const data = await response.json();\n\n//       setTodos([...todos, data]);\n\n//       setPopupActive(false);\n//       setNewTodo(\"\");\n//     } catch (err) {\n//       console.error(\"Error adding todo: \", err);\n//     }\n//   };\n\n//   const deleteTodo = async (id) => {\n//     try {\n//       const response = await fetch(api_base + '/todo/delete/' + id, {\n//         method: \"DELETE\",\n//       });\n\n//       if (response.ok) {\n//         // Delete was successful, update the state\n//         setTodos((todos) =>\n//           todos.filter((todo) => todo._id !== id)\n//         );\n//       } else {\n//         console.error(\"Error deleting todo: \", response.statusText);\n//       }\n//     } catch (err) {\n//       console.error(\"Error deleting todo: \", err);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <ConnectionCount />\n//       <h1>Welcome, My Friend</h1>\n//       <h4>Your tasks</h4>\n\n//       <TransitionGroup className=\"todos\">\n//         {todos.length > 0 ? (\n//           todos.map((todo) => (\n//             <CSSTransition key={todo._id} timeout={500} classNames=\"todo\">\n//               <div\n//                 className={\"todo\" + (todo.complete ? \" is-complete\" : \"\")}\n//                 onClick={() => completeTodo(todo._id)}\n//               >\n//                 <div className=\"checkbox\"></div>\n//                 <div className=\"text\">{todo.text}</div>\n//                 <div className=\"delete-todo\" onClick={() => deleteTodo(todo._id)}>\n//                   x\n//                 </div>\n//               </div>\n//             </CSSTransition>\n//           ))\n//         ) : null}\n//       </TransitionGroup>\n\n//       <div className=\"addPopup\" onClick={() => setPopupActive(true)}>\n//         +\n//       </div>\n\n//       {popupActive ? (\n//         <CSSTransition in={true} timeout={300} classNames=\"popup\" unmountOnExit>\n//           <div className=\"popup\">\n//             <div className=\"closePopup\" onClick={() => setPopupActive(false)}>\n//               X\n//             </div>\n//             <div className=\"content\">\n//               <h3>Add Task</h3>\n//               <input\n//                 type=\"text\"\n//                 className=\"add-todo-input\"\n//                 onChange={(e) => setNewTodo(e.target.value)}\n//                 value={newTodo}\n//               />\n//               <div className=\"button\" onClick={addTodo}>\n//                 Create Task\n//               </div>\n//             </div>\n//           </div>\n//         </CSSTransition>\n//       ) : (\n//         ''\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useEffect, useState } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport ConnectionCount from './ConnectionCount'; // Correct the import path\nconst api_base = 'http://localhost:3001';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [popupActive, setPopupActive] = useState(false);\n  const [newTodo, setNewTodo] = useState(\"\");\n  const [connectionCount, setConnectionCount] = useState(0); // State to hold the connection count\n\n  useEffect(() => {\n    GetTodos();\n  }, []);\n\n  // Function to fetch the connection count from the server\n  const fetchConnectionCount = async () => {\n    try {\n      const response = await fetch(api_base + '/connection-count');\n      const data = await response.json();\n      setConnectionCount(data.connectionCount); // Update the connection count state\n    } catch (error) {\n      console.error('Error fetching connection count: ', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchConnectionCount(); // Fetch the initial connection count\n  }, []); // Empty dependency array, runs only once on component mount\n\n  const GetTodos = () => {\n    fetch(api_base + '/todos')\n      .then((res) => res.json())\n      .then((data) => {\n        setTodos(data);\n        fetchConnectionCount(); // Fetch connection count after fetching todos\n      })\n      .catch((err) => console.error(\"Error: \", err));\n  };\n\n  const completeTodo = async (id) => {\n    try {\n      const response = await fetch(api_base + '/todo/complete/' + id);\n      const data = await response.json();\n\n      setTodos((todos) =>\n        todos.map((todo) => {\n          if (todo._id === data._id) {\n            todo.complete = data.complete;\n          }\n          return todo;\n        })\n      );\n\n      fetchConnectionCount(); // Fetch connection count after completing todo\n    } catch (err) {\n      console.error(\"Error completing todo: \", err);\n    }\n  };\n\n  const addTodo = async () => {\n    try {\n      const response = await fetch(api_base + \"/todo/new\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          text: newTodo,\n        }),\n      });\n\n      const data = await response.json();\n\n      setTodos([...todos, data]);\n\n      setPopupActive(false);\n      setNewTodo(\"\");\n\n      fetchConnectionCount(); // Fetch connection count after adding todo\n    } catch (err) {\n      console.error(\"Error adding todo: \", err);\n    }\n  };\n\n  const deleteTodo = async (id) => {\n    try {\n      const response = await fetch(api_base + '/todo/delete/' + id, {\n        method: \"DELETE\",\n      });\n\n      if (response.ok) {\n        // Delete was successful, update the state\n        setTodos((todos) =>\n          todos.filter((todo) => todo._id !== id)\n        );\n      } else {\n        console.error(\"Error deleting todo: \", response.statusText);\n      }\n\n      fetchConnectionCount(); // Fetch connection count after deleting todo\n    } catch (err) {\n      console.error(\"Error deleting todo: \", err);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <ConnectionCount connectionCount={connectionCount} /> {/* Pass connection count to the component */}\n      <h1>Welcome, My Friend</h1>\n      <h4>Your tasks</h4>\n\n      {/* Rest of your component */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}